package edu.byu.yc;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.File;

import edu.byu.yc.symboltable.SymbolTable;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * @author Samuel Nuttall
 * <p>
 * This class tests that the SymbolTable visitor correctly assembles a symbol table for a given java
 * program.
 */
public class SymbolTableTests {

    private final String root = System.getProperty("user.dir");
    private final File fieldsFile = new File(new File(root, "test-files"), "Fields.java");
    private final File methodsNoParamsFile = new File(new File(root, "test-files"), "MethodsNoParams.java");
    private final File methodsParamsFile = new File(new File(root, "test-files"), "MethodsParams.java");
    private final File fieldsMethodsParamsFile = new File(new File(root, "test-files"), "FieldsMethodsParams.java");


    private final String fields = TypeChecker.readFile(fieldsFile.getPath());
    private final String methodsNoParams = TypeChecker.readFile(methodsNoParamsFile.getPath());
    private final String methodsParams = TypeChecker.readFile(methodsParamsFile.getPath());
    private final String fieldsMethodsParams = TypeChecker.readFile(fieldsMethodsParamsFile.getPath());


    /**
     * Tests that the Symbol table correctly identifies and categorizes field names and types
     * Parses test-files/Fields.java and compares the expected results of the symbol table to the
     * actual
     */
    @Test
    @DisplayName("Test Field Names and Types")
    public void testFields() {
        SymbolTable symbolTable = TypeChecker.createSymbolTable(TypeChecker.parse(fields));

        //Refer to test-files/Fields.java
        String expectedClassFQN = "edu.byu.yc.tests.Fields";  //Expected fully qualified name of the test class, generated by the visitor
        String fieldType1 = symbolTable.getFieldType(expectedClassFQN, "cheese");
        String fieldType2 = symbolTable.getFieldType(expectedClassFQN, "num");
        String fieldType3 = symbolTable.getFieldType(expectedClassFQN, "fl");
        String fieldType4 = symbolTable.getFieldType(expectedClassFQN, "node");

        assertEquals("String", fieldType1);
        assertEquals("int", fieldType2);
        assertEquals("float", fieldType3);
        assertEquals("ASTNode", fieldType4);
    }


}
